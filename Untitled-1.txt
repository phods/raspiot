# list of dependencies
pip list

pip freeze

pip list

List installed packages, including editables.

pip freeze

Output installed packages in requirements format.




Created with sudo nano /usr/local/bin/checkwifi.sh

Code: Select all

ping -c4 192.168.1.1 > /dev/null
 
if [ $? != 0 ] 
then
  sudo ifconfig wlan0 down
  sleep 5
  sudo ifconfig wlan0 up
fi


Then had to
Code: Select all

sudo chmod 775 /usr/local/bin/checkwifi.sh

And in crontab -e and add:
Code: Select all

*/5 * * * * /usr/bin/sudo -H /usr/local/bin/checkwifi.sh >> /dev/null 2>&1



I went a stage further and created a script file to first check the wifi is working. If not, it will then restart the wifi and re-check. If the second check doesn't work it will reboot. At each point it is writing to a text file so I get a date and time of the action so I can compare this with any other logs. I have only started doing this with the PI4 because it is only with this that I have found wifi to be erratic. However, I have copied this into my other PIs just as a check and balance.

You will have to use your own reliable IP address to ping and make sure you set the script as executable by anyone. Also, you'll need your own directory structure and filenames.

I simply use crontab to run the code every 10 mins:
Code: Select all

#!/bin/bash
# This runs in Crontab to check that the wifi is working.  If it is faulty it will 
# firstly restart wifi and check all is running well.  If not, the script will reboot the PI
# Any checks and reboots are stored as actions in txt files in /home/pi/DomCode
# Dominic 29/1/2020

# Lines below are to get the date and time variables ready
BASHDATE=`date +"%b %d, %Y"`
BASHTIME=`date +" %T"`
# Start of code
ping -c1 10.3.1.1 > /dev/null
if [ $? != 0 ] 
then
#	WiFi is down so going into the next phase of this file to check, reset and reboot too if necessary
	echo WiFi all bad, restarting it on ${BASHDATE} at: ${BASHTIME} >> /home/pi/DomCode/WiFi_bad.txt
	sudo ifconfig wlan0 down
	sleep 5
#	Restarting WIFI if needed
	sudo ifconfig wlan0 up
	sleep 18
	sleep 2
#	Re-pinging after wifi re-start	
	ping -c1 10.3.1.1 > /dev/null
#	If Ping fails the PI will restart
	if [ $? != 0 ]
	then
		echo WiFi all bad, restarting the PI on ${BASHDATE} at: ${BASHTIME} >> /home/pi/DomCode/WiFi_bad_reboot.txt
		sleep 5
		sudo reboot
	fi

else
# If all is good this is written to a text file.  I'll reduce this to only having one line kept becuase later
	echo WiFi all good on ${BASHDATE} at:  ${BASHTIME} > /home/pi/DomCode/WiFi_good.txt
fi

It’s quite simple..
Code: Select all

sudo ip link set wlan0 up
Then ...
Code: Select all

sudo dhcpcd
That should do.





A one-liner that should work in RpiOS (Buster)
Code: Select all

sudo systemctl restart dhcpcd
If I'm on a local terminal I usually do it more forcibly
Code: Select all

sudo systemctl stop dhcpcd
sudo systemctl start dhcpcd

////////////////////////////////////////////////////////////////

FROM nodered/node-red:latest
RUN for addonnodes in \
node-red-node-pi-gpiod \
node-red-dashboard \
node-red-node-openweathermap \
node-red-node-google \
node-red-node-emoncms \
node-red-node-geofence \
node-red-node-ping \
node-red-node-random \
node-red-contrib-influxdb \
node-red-contrib-config \
node-red-contrib-esplogin \
node-red-contrib-npm \
node-red-contrib-file-function \
; do \
npm install ${addonnodes} ;\
done;
RUN npm install --unsafe-perm node-red-node-sqlite


////////////////////////////////////////////////////////////////
In my case, I don’t want to use an HDMI connection to my TV in order to finalize system setup (my Raspberry will be connected only via Wi-Fi). So, before using it and after having flashed its SD, let’s configure Wi-Fi and SSH connection directly modifying files inside SD card.

Extract SD card and re-insert it in your PC. From your file explorer, in “This Computer” we can see 1 SD partition:


ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=«your_ISO-3166-1_two-letter_country_code»
network={
     ssid="«your_SSID»"
     psk="«your_PSK»"
     key_mgmt=WPA-PSK
}

Replace «your_ISO-3166-1_two-letter_country_code» with your ISO Country Code (such as US for United States), «your_SSID» with your wireless access point name and «your_PSK» with your wi-fi password.
Save this file under boot partition, naming it as “wpa_supplicant.conf”.

In addition, we will create a new file named “ssh” (without extension) under boot partition also to enable SSH in our raspberry. It is not important what is contained in this file: when Pi boots, it looks for the “ssh” file and if it is found, SSH is enabled and then the file is deleted.
So, let’s open a new Notepad window:

select boot partition from SD card in left column.

Insert in “File name” field value “ssh” and click “Save”. Be aware that notepad sometimes saves files adding “.txt” extension. So, control saved file and be sure that its extension is NOT included.

Extract SD card from your SD reader and insert it in your raspberry.